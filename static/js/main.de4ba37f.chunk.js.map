{"version":3,"sources":["index.js"],"names":["init","Square","props","className","onClick","value","Board","i","this","squares","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","slice","length","calculateWinner","setState","concat","step","status","current","winner","moves","map","move","desc","jumpTo","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"mOAIa,SAAPA,IAIF,SAASC,EAAOC,GACZ,OACI,wBACIC,UAAU,SACVC,QAASF,EAAME,QAFnB,SAIKF,EAAMG,QAVE,IAiBfC,EAjBe,kKAmBjB,SAAaC,GAAI,IAAD,OACZ,OACI,aADK,CACJN,EAAD,CACII,MAAOG,KAAKN,MAAMO,QAAQF,GAC1BH,QAAS,kBAAM,EAAKF,MAAME,QAAQG,QAvB7B,oBA4BjB,WAEI,OACI,sBAAKJ,UAAU,aAAf,UACSK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,UAxClB,GAiBDC,IAAMC,WA+BpBC,EAhDe,kDAiDjB,WAAYX,GAAQ,IAAD,8BACf,cAAMA,IACDY,MAAQ,CACTC,QAAS,CAAC,CACNN,QAASO,MAAM,GAAGC,KAAK,QAE3BC,WAAY,EACZC,SAAS,GAPE,EAjDF,+CA4DjB,SAAYZ,GACR,IAAMQ,EAAUP,KAAKM,MAAMC,QAAQK,MAAM,EAAGZ,KAAKM,MAAMI,WAAa,GAE9DT,EADUM,EAAQA,EAAQM,OAAS,GACjBZ,QAAQW,QAC5BE,EAAgBb,IAAYA,EAAQF,KAGxCE,EAAQF,GAAKC,KAAKM,MAAMK,QAAU,IAAM,IACxCX,KAAKe,SAAS,CACVR,QAASA,EAAQS,OAAO,CAAC,CACrBf,QAASA,KAEbS,WAAYH,EAAQM,OACpBF,SAAUX,KAAKM,MAAMK,aAzEZ,oBA6EjB,SAAOM,GACHjB,KAAKe,SAAS,CACVL,WAAYO,EACZN,QAAUM,EAAO,IAAO,MAhFf,oBAoFjB,WAAU,IAiBFC,EAjBC,OACCX,EAAUP,KAAKM,MAAMC,QACrBY,EAAUZ,EAAQP,KAAKM,MAAMI,YAC7BU,EAASN,EAAgBK,EAAQlB,SAEjCoB,EAAQd,EAAQe,KAAI,SAACL,EAAMM,GAE7B,IAAMC,EAAOD,GAET,GACJ,OACI,oBAAI5B,UAAU,wBAAd,SACI,yBAAQA,UAAU,kBAAkBC,QAAS,kBAAM,EAAK6B,OAAOF,IAA/D,UAAuEC,EAAK,mBAAG7B,UAAU,oBADlD4B,MAgBnD,OAPIL,EADAE,GACUpB,KAAKM,MAAMK,QAAU,WAAa,YAAc,SAChC,KAAnBJ,EAAQM,OACT,cAEG,eAAiBb,KAAKM,MAAMK,QAAU,WAAa,YAI5D,sBAAKhB,UAAU,OAAf,UACI,qBAAKA,UAAU,YAAf,SACI,8BAAMuB,MAEV,qBAAKvB,UAAU,oBAAf,SACI,cAACG,EAAD,CACIG,QAASkB,EAAQlB,QACjBL,QAAS,SAACG,GAAD,OAAO,EAAK2B,YAAY3B,QAGzC,qBAAKJ,UAAU,aAAf,SACI,oBAAIA,UAAU,mBAAd,SAAkC0B,MAGtC,wBAAQ1B,UAAU,eAAeC,QAASJ,EAA1C,6BA9HK,GAgDFW,IAAMC,WA2FzB,SAASU,EAAgBb,GAWrB,IAVA,IAAM0B,EAAQ,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEF5B,EAAI,EAAGA,EAAI4B,EAAMd,OAAQd,IAAK,CAAC,IAAD,cACjB4B,EAAM5B,GADW,GAC5B6B,EAD4B,KACzBC,EADyB,KACtBC,EADsB,KAEnC,GAAI7B,EAAQ2B,IAAM3B,EAAQ2B,KAAO3B,EAAQ4B,IAAM5B,EAAQ2B,KAAO3B,EAAQ6B,GAClE,OAAO7B,EAAQ2B,GAGvB,OAAO,KAtBXG,IAASC,OACL,cAAC3B,EAAD,IACA4B,SAASC,eAAe,SAyBhC1C,K","file":"static/js/main.de4ba37f.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nconst init = function () { // we call this function immediately on page load to set up the game and can call it anytime to start a new game\n\n    // The Square component renders a single <button>\n\n    function Square(props) {\n        return (\n            <button\n                className=\"square\"\n                onClick={props.onClick}\n            >\n                {props.value}\n            </button>\n        );\n    }\n\n    // the Board renders 9 squares\n\n    class Board extends React.Component {\n\n        renderSquare(i) {\n            return ( // wrap in parentheses so that JavaScript doesn’t insert a semicolon after return and break our code.\n                <Square\n                    value={this.props.squares[i]}\n                    onClick={() => this.props.onClick(i)}\n                />\n            );\n        }\n\n        render() {\n\n            return (\n                <div className=\"game-board\">\n                        {this.renderSquare(0)}\n                        {this.renderSquare(1)}\n                        {this.renderSquare(2)}\n                        {this.renderSquare(3)}\n                        {this.renderSquare(4)}\n                        {this.renderSquare(5)}\n                        {this.renderSquare(6)}\n                        {this.renderSquare(7)}\n                        {this.renderSquare(8)}\n                </div>\n            );\n        }\n    }\n\n    //   The Game component renders a board\n\n    class Game extends React.Component {\n        constructor(props) {\n            super(props); // need to always call super when defining the constructor of a subclass. All React component classes that have a constructor should start with a super(props) call.\n            this.state = {  // \"state\" allows components to remember things (e.g. whether a button has been clicked already)\n                history: [{\n                    squares: Array(9).fill(null)\n                }],\n                stepNumber: 0,\n                xIsNext: true,\n            };\n        }\n\n        handleClick(i) {\n            const history = this.state.history.slice(0, this.state.stepNumber + 1); // ensures that if we go back to a previous move and then make a new move from that point, we throw away all the “future” history\n            const current = history[history.length - 1];\n            const squares = current.squares.slice(); // using \"slice\" creates a new copy of \"squares\" array after every move. This means we can more easily add a feature that allows us to move back and forth between the current and previous moves\n            if (calculateWinner(squares) || squares[i]) {\n                return;\n            }\n            squares[i] = this.state.xIsNext ? 'X' : 'O';\n            this.setState({\n                history: history.concat([{\n                    squares: squares\n                }]),\n                stepNumber: history.length,\n                xIsNext: !this.state.xIsNext, // this will be true if the number that we’re changing stepNumber to is even\n            });\n        }\n\n        jumpTo(step) {\n            this.setState({\n                stepNumber: step,\n                xIsNext: (step % 2) === 0,\n            });\n        }\n\n        render() {\n            const history = this.state.history;\n            const current = history[this.state.stepNumber]; // renders the currently selected move according to stepNumber i.e. will show the most recent move or a previous move if we select a previous move\n            const winner = calculateWinner(current.squares);\n\n            const moves = history.map((step, move) => {\n                // const restartIcon = \n                const desc = move ?\n                    move :\n                    '';\n                return (\n                    <li className=\"game-moves__list-item\" key={move}>\n                        <button className=\"game-moves__btn\" onClick={() => this.jumpTo(move)}>{desc}<i className=\"fas fa-sync\"></i></button>\n                    </li>\n                );\n            });\n\n            let status;\n\n            if (winner) {\n                status = (this.state.xIsNext ? 'Player 2' : 'Player 1') + ' wins!';\n            } else if (history.length === 10) {\n                status = `It's a draw`\n            } else {\n                status = 'Your move, ' + (this.state.xIsNext ? 'player 1' : 'player 2');\n            }\n\n            return (\n                <div className=\"game\">\n                    <div className=\"game-info\">\n                        <div>{status}</div>\n                    </div>\n                    <div className=\"game-board-holder\">\n                        <Board\n                            squares={current.squares}\n                            onClick={(i) => this.handleClick(i)}\n                        />\n                    </div>\n                    <div className=\"game-moves\">\n                        <ol className=\"game-moves__list\">{moves}</ol>\n                    </div>\n\n                    <button className=\"new-game-btn\" onClick={init}>New game</button>\n                </div>\n            );\n        }\n    }\n\n    // ========================================\n\n    ReactDOM.render(\n        <Game />,\n        document.getElementById('root')\n    );\n\n    function calculateWinner(squares) {\n        const lines = [\n            [0, 1, 2],\n            [3, 4, 5],\n            [6, 7, 8],\n            [0, 3, 6],\n            [1, 4, 7],\n            [2, 5, 8],\n            [0, 4, 8],\n            [2, 4, 6],\n        ];\n        for (let i = 0; i < lines.length; i++) {\n            const [a, b, c] = lines[i];\n            if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n                return squares[a];\n            }\n        }\n        return null;\n    }\n\n};\n\ninit();"],"sourceRoot":""}